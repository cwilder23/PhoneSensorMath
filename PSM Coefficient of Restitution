{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calculating Energy Lost of  A Bouncing Ball Using Audio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The purpose of the Jupyter notebook is to go through how to take a vma recording of a golf ball bouncing on tile floor to calculate the energy lost in the inelasic collisions. The notebook is tailored to use the Voice Memo app on an iPhone, but a similar application is available on Android. To generate the necessary data, we placed a phone on the floor, began the recording, and dropped a golf ball sufficiently far away from the phone. Using that data we found the time of each bounce to calculate the coefficeient of restitution of each bounce to find the proportion of energy lost. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Input File Specification\n",
    "\n",
    "The following assumes the input of a vma file with two channels. This is what is generated from the iPhone Voice Memo app, and it is my understanding is also generated from the Android sound recording app. We can then use this to find amplitude and time data. However, after we load the data and calculate the time of each sample, we also have to isolate just one of the channels to do the necessary calculations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The necessary libraries \n",
    "from scipy.io import wavfile\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.signal as sci\n",
    "from scipy.signal import argrelmax\n",
    "from pylab import*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Coefficient of Restitution and the Kinematics of a Bouncing Ball\n",
    "A coefficient of restitution is primary way to describe the energy lost in a collision of a sphere. The coefficient of restitution is the ratio of final speed to initial speed of an object after a collision with another object. In our particular situation, this is the ratio of the speed of the golf ball as it leaves the tile floor to the speed of the golf ball right before it contacted the tile floor. We are interested in speed in terms of energy lost because the equation for kinetic energy is given by $$KE = \\frac{1}{2}mv^2$$ where $m$ is the mass of an object and $v$ is it's velocity. The mass of the object remains constant throughout the ball bouncing, so the change in magnitude of velocity before and after the collision tells us how much energy lost in the collision. \n",
    "\n",
    "We will now apply one of the five fundamental kinematics equation to our scenario. The equation is as follows $$\\Delta x = v_0t + \\frac{1}{2}at^2$$ where $\\Delta x$ represents the change in position from one bounce to the next, which would be 0. Then $v_0$ is the initial velocity immediately following on of the bounces. The acceleration is $a$ and is equal to the gravitational constant $g = 9.8 m/s^2$. The time of the $ith$ bounce is $t_i$ and $t$ in this equation represents the time between two consecutive bounces. Given the context of our problem, we can rewrite this equation as $$v_i = \\frac{1}{2}g(t_{i+1}-t_i)$$ where $v_i$ is the velocity as the ball right after the $i-1$ bounce which is also the velocity right before the $ith$ bounce. Again, the variable $g$ will stay the same throughout our experiment, so instead looking at a ratio of velocities for the coefficient of restitution, it is sufficient to examine the ratio of time between bounces. Let $r$ be our coefficient of restitution, then $$r = \\dfrac{t_{i+1}-t_i}{t_i-t_{i-1}.}$$ is the coefficient of restitution for the $ith$ bounce. However, the coefficient of restitution should be similar for each bounce. With the same object and surface, the same proportion of energy is lost each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the sound data and calculating the associated times\n",
    "samplerate, data = wavfile.read('PSM COR Microphone Reading.wav')\n",
    "times = np.arange(len(data))/float(samplerate)\n",
    "\n",
    "# This tells us there is two channnels\n",
    "data.shape\n",
    "\n",
    "# Here we isolate one channel\n",
    "data = data[:,0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the Data\n",
    "Below there is a plot of the time versus amplitude, this gives a good picture of the data. Then there is another plot that is sample number versus amplitude. The user will need to first plot the whole data range and then input sample numbers that isolate the bounce data for a second. This process is shown below and the user will input the sample numbers into plt.xlim(x_1,x_2). This is necessary for the next part of the notebook where the user has to estimate sample numbers in between bounces for the notebook to calculcate the time of the bounce."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'amplitude')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The first plot showing time vs. amplitude\n",
    "plt.plot(times, data)\n",
    "plt.xlabel('time (s)')\n",
    "plt.ylabel('amplitude')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'amplitude')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The zoomed out plot of sample number vs. amplitude\n",
    "plt.plot(data)\n",
    "plt.xlabel('sample number')\n",
    "plt.ylabel('amplitude')\n",
    "#plt.xlim(200000, 400000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(525000, 750000)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# USER NEEDS TO CHANGE x limits to match their own data set\n",
    "# The zoomed in plot of sample number vs. amplitude\n",
    "plt.plot(data)\n",
    "plt.xlabel('sample number')\n",
    "plt.ylabel('amplitude')\n",
    "plt.xlim(525000, 750000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### User Input\n",
    "Here the user needs to make their best guess to find a sample number in between each bounce based on the plot. An example is shown below. The user also has the option to calculate one, two, or three trials of the coefficient of restitution. Simply run the cell below and answer the questions based on the above zoomed in plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is your best guess for a sample number in between the start of the recording and first bounce?525000\n",
      "What is your best guess for a sample number in between the first and second bounce?575000\n",
      "What is your best quess for a sample number in between the second and third bounce?612500\n",
      "What is your best guess for a sample number in between the third and fourth bounce?640000\n",
      "Would you like to do another bounce? (y/n)y\n",
      "What is your best guess for a sample number in between the fourth and fifth bounce?665000\n",
      "Would you like to do another bounce? (y/n)y\n",
      "What is your best guess for a sample number in between the fourth and fifth bounce?690000\n"
     ]
    }
   ],
   "source": [
    "# In this cell the user will provide input based on the above plot to find the times of bounces\n",
    "one = input(\"What is your best guess for a sample number in between the start of the recording and first bounce?\")\n",
    "two = input(\"What is your best guess for a sample number in between the first and second bounce?\")\n",
    "three = input(\"What is your best quess for a sample number in between the second and third bounce?\")\n",
    "four = input(\"What is your best guess for a sample number in between the third and fourth bounce?\")\n",
    "question1 = input(\"Would you like to do another bounce? (y/n)\")\n",
    "if question1.lower() == 'y':\n",
    "    five = input(\"What is your best guess for a sample number in between the fourth and fifth bounce?\")\n",
    "    question2 = input(\"Would you like to do another bounce? (y/n)\")\n",
    "    if question2.lower() == 'y':\n",
    "        six = input(\"What is your best guess for a sample number in between the fourth and fifth bounce?\")\n",
    "    else:\n",
    "        six = 0\n",
    "else:\n",
    "    five = 0\n",
    "    six = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The calculated coefficient of restitution is: 0.85\n",
      "The calculated coefficient of restitution is: 0.83\n",
      "The calculated coefficient of restitution is: 0.76\n",
      "11.7439375\n",
      "12.5134375\n",
      "13.170833333333333\n",
      "13.718708333333334\n",
      "14.136041666666667\n"
     ]
    }
   ],
   "source": [
    "index_1 = np.argmax(data[int(one):int(two)])\n",
    "index_2 = np.argmax(data[int(two):int(three)])\n",
    "t_first = times[index_2+int(two)]-times[index_1+int(one)]\n",
    "index_3 = np.argmax(data[int(three):int(four)])\n",
    "t_second = times[index_3+int(three)] - times[index_2+int(two)]\n",
    "cr1 = t_second / t_first\n",
    "print(\"The calculated coefficient of restitution is:\", round(cr1,2))\n",
    "if five != 0:\n",
    "    index_4 = np.argmax(data[int(four):int(five)])\n",
    "    t_third = times[index_4+int(four)] - times[index_3+int(three)]\n",
    "    cr2 = t_third / t_second\n",
    "    print(\"The calculated coefficient of restitution is:\", round(cr2,2))\n",
    "    if six != 0:\n",
    "        index_5 = np.argmax(data[int(five):int(six)])\n",
    "        t_fourth = times[index_5+int(five)] - times[index_4+int(four)]\n",
    "        cr3 = t_fourth / t_third\n",
    "        print(\"The calculated coefficient of restitution is:\", round(cr3,2))\n",
    "        \n",
    "print(times[index_1+int(one)])\n",
    "print(times[index_2+int(two)])\n",
    "print(times[index_3+int(three)])\n",
    "print(times[index_4+int(four)])\n",
    "print(times[index_5+int(five)])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$r = \\dfrac{t_{i+1}-t_i}{t_i-t_{i-1}}$$\n",
    "$$r_1 = \\dfrac{0.66}{0.77} = 0.85$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
